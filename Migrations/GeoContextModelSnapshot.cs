// <auto-generated />
using System;
using IconosGeograficos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IconosGeograficos.Migrations
{
    [DbContext(typeof(GeoContext))]
    partial class GeoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CiudadesIconosGeograficos", b =>
                {
                    b.Property<int>("ciudadesid")
                        .HasColumnType("int");

                    b.Property<int>("iconosGeograficosid")
                        .HasColumnType("int");

                    b.HasKey("ciudadesid", "iconosGeograficosid");

                    b.HasIndex("iconosGeograficosid");

                    b.ToTable("CiudadesIconosGeograficos");
                });

            modelBuilder.Entity("IconosGeograficos.Modelos.Ciudades", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int>("cantidadHabitantes")
                        .HasColumnType("int");

                    b.Property<int>("continenteId")
                        .HasColumnType("int");

                    b.Property<string>("denominacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("superficieTotal")
                        .HasColumnType("float");

                    b.Property<string>("urlImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("continenteId");

                    b.ToTable("ciudades");
                });

            modelBuilder.Entity("IconosGeograficos.Modelos.Continente", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("denominacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("continentes");
                });

            modelBuilder.Entity("IconosGeograficos.Modelos.IconosGeograficos", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<double>("altura")
                        .HasColumnType("float");

                    b.Property<string>("denominacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("historia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("iconosGeograficos");
                });

            modelBuilder.Entity("CiudadesIconosGeograficos", b =>
                {
                    b.HasOne("IconosGeograficos.Modelos.Ciudades", null)
                        .WithMany()
                        .HasForeignKey("ciudadesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IconosGeograficos.Modelos.IconosGeograficos", null)
                        .WithMany()
                        .HasForeignKey("iconosGeograficosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IconosGeograficos.Modelos.Ciudades", b =>
                {
                    b.HasOne("IconosGeograficos.Modelos.Continente", "continente")
                        .WithMany("ciudades")
                        .HasForeignKey("continenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("continente");
                });

            modelBuilder.Entity("IconosGeograficos.Modelos.Continente", b =>
                {
                    b.Navigation("ciudades");
                });
#pragma warning restore 612, 618
        }
    }
}
